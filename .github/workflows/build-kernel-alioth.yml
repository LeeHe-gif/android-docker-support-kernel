name: Build alioth Kernel with Android Clang

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses-dev bison bc flex \
          libssl-dev libelf-dev rsync kmod git cpio \
          wget zip unzip python3 make xz-utils

- name: Download Proton Clang (Android Clang alternative)
  run: |
    # 创建工具链目录
    sudo mkdir -p /opt/toolchains
    sudo chmod 777 /opt/toolchains
    
    echo "=== 下载 Proton Clang 15 ==="
    # Proton Clang 是基于 AOSP Clang 的增强版本，兼容性更好
    wget -q https://github.com/kdrag0n/proton-clang/archive/refs/heads/master.tar.gz
    tar -xf master.tar.gz -C /opt/toolchains/
    mv /opt/toolchains/proton-clang-master /opt/toolchains/proton-clang
    
    echo "=== 验证工具链版本 ==="
    /opt/toolchains/proton-clang/bin/clang --version | head -3

    - name: Clone anykernel3 repository
      run: |
        git clone https://github.com/LeeHe-gif/AnyKernel3.git anykernel3
        cd anykernel3
        sed -i 's/is_slot_device=0/is_slot_device=1/' anykernel.sh
        sed -i 's/kernel.string=polaris_docker_Kernel-arrow11-by_LeeHe/kernel.string=alioth_docker_Kernel-arrow12.1-by_LeeHe/' anykernel.sh
        sed -i 's/device.name1=polaris/device.name1=alioth/' anykernel.sh || true
        sed -i 's/device.name2=polaris/device.name2=alioth/' anykernel.sh || true

    - name: Clone kernel source
      run: |
        git clone https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth.git kernel_source
                
    - name: Build kernel with Android Clang
      run: |
        cp build1.sh kernel_source/
        cd kernel_source
        chmod 755 build1.sh
        ./build1.sh
        
    - name: Verify build output
      run: |
        if [ -f "kernel_source/out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "✅ 内核编译成功"
          ls -la kernel_source/out/arch/arm64/boot/Image.gz-dtb
          echo "文件大小:"
          du -h kernel_source/out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 内核编译失败，Image.gz-dtb 文件未找到"
          echo "搜索相关文件:"
          find kernel_source/out/ -name "Image*" -type f 2>/dev/null || echo "未找到任何 Image 文件"
          if [ -f "kernel_source/build.log" ]; then
            echo "=== 编译日志最后100行 ==="
            tail -100 kernel_source/build.log
          fi
          exit 1
        fi
        
    - name: Create anykernel3 package
      run: |
        cp kernel_source/out/arch/arm64/boot/Image.gz-dtb anykernel3/
        cd anykernel3/
        zip -r alioth_dockerkernel_clang.zip . -x "*.git*"
        
        if [ -f "alioth_dockerkernel_clang.zip" ]; then
          echo "✅ anykernel3 包创建成功"
          ls -la alioth_dockerkernel_clang.zip
          du -h alioth_dockerkernel_clang.zip
        else
          echo "❌ anykernel3 包创建失败"
          exit 1
        fi
        
    - name: Create out directory archive
      run: |
        cd kernel_source
        zip -r kernel_boot_directory_clang.zip out/arch/arm64/boot
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-clang-artifacts
        path: |
          anykernel3/alioth_dockerkernel_clang.zip
          kernel_source/kernel_boot_directory_clang.zip
        retention-days: 30

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "alioth-kernel-clang-build"
        name: "alioth Docker Kernel Build (Android Clang 15.0.1)"
        body: |
          # alioth Docker Kernel Build (Clang)
          
          使用 Android Clang 15.0.1 编译的小米 POCO F3/Redmi K40 (alioth) 内核
          
          ## 编译环境：
          - **编译器**: Android Clang 15.0.1 (r458507)
          - **链接器**: LLD 15.0.1
          - **GCC 工具链**: AOSP aarch64-linux-android-4.9
          - **内核版本**: 4.19
          - **目标设备**: alioth (POCO F3/Redmi K40)
          
          ## 包含文件：
          - `alioth_dockerkernel_clang.zip` - AnyKernel3 刷机包
          - `kernel_boot_directory_clang.zip` - 完整的编译输出目录
          
          ## 编译配置：
          - ✅ 使用与原版相同的 Android Clang 15.0.1
          - ✅ LLD 链接器
          - ✅ 完整 Docker 容器支持
          - ✅ 基于 Arrow OS 12.1 内核源码
          
          ## 刷机说明：
          1. 下载 `alioth_dockerkernel_clang.zip`
          2. 通过 TWRP Recovery 刷入
          3. 重启设备
          
          **注意：** 刷机前请备份重要数据。
        draft: false
        prerelease: false
        files: |
          anykernel3/alioth_dockerkernel_clang.zip
          kernel_source/kernel_boot_directory_clang.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
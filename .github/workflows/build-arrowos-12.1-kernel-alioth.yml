name: Build ArrowOS12.1 alioth Kernel and Create Release

on:
  workflow_dispatch:
  
env:
  REPO_URL: https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth
  REPO_BRANCH: arrow-12.1
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install basic dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl build-essential \
            libncurses-dev bison bc flex libssl-dev \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libelf-dev rsync kmod git cpio wget zip \
            unzip python3 python-is-python3 make xz-utils python3-pip ccache rsync

      - name: Check for existing Python 2.7
        id: check-python
        run: |
          if command -v python2.7 &> /dev/null && python2.7 --version 2>&1 | grep -q "2.7"; then
            echo "python_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Python 2.7 already installed in system"
          else
            echo "python_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Python 2.7 not found, will install"
          fi

      - name: Cache Python 2.7
        if: steps.check-python.outputs.python_exists == 'false'
        uses: actions/cache@v4
        id: cache-python27
        with:
          path: /tmp/python-2.7.18
          key: python-2.7.18-${{ runner.os }}-v4
          restore-keys: |
            python-2.7.18-${{ runner.os }}-

      - name: Build and Install Python 2.7 (if not exists and cache miss)
        if: steps.check-python.outputs.python_exists == 'false' && steps.cache-python27.outputs.cache-hit != 'true'
        run: |
          echo "Installing Python 2.7.18 from source..."
          cd /tmp
          wget -q https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xzf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --enable-optimizations --prefix=/tmp/python-2.7.18
          make -j$(nproc)
          make install
          cd ..
          rm -rf Python-2.7.18*

      - name: Install Python to system from cache
        if: steps.check-python.outputs.python_exists == 'false' && steps.cache-python27.outputs.cache-hit == 'true'
        run: |
          echo "Installing cached Python 2.7.18 to system..."
          sudo cp -r /tmp/python-2.7.18/* /usr/local/ || true
          # 确保二进制文件有执行权限
          sudo chmod +x /usr/local/bin/python2.7 /usr/local/bin/python2 || true

      - name: Install Python to system from source
        if: steps.check-python.outputs.python_exists == 'false' && steps.cache-python27.outputs.cache-hit != 'true'
        run: |
          echo "Installing built Python 2.7.18 to system..."
          sudo cp -r /tmp/python-2.7.18/* /usr/local/
          # 确保二进制文件有执行权限
          sudo chmod +x /usr/local/bin/python2.7 /usr/local/bin/python2

      - name: Create Python 2 symlinks
        if: steps.check-python.outputs.python_exists == 'false'
        run: |
          echo "Creating Python 2 symlinks..."
          sudo ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2 || true
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7 || true
          sudo ln -sf /usr/local/bin/python2 /usr/bin/python2 || true

      - name: Final Python verification
        run: |
          echo "=== Final Python Verification ==="
          echo "PATH: $PATH"
          echo "which python2.7: $(which python2.7 2>/dev/null || echo 'not found')"
          echo "which python2: $(which python2 2>/dev/null || echo 'not found')"
          python2.7 --version || echo "python2.7 --version failed"
          python2 --version || echo "python2 --version failed"
          echo "Python 2.7 location:"
          find /usr -name "python2.7" -type f 2>/dev/null | head -5 || echo "No python2.7 found in /usr"

      - name: Clone kernel source and setup KernelSU
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH kernel_source
          git clone https://github.com/LeeHe-gif/AnyKernel3.git
          cd AnyKernel3
          rm -rf ramdisk anykernel.sh
          wget https://github.com/LeeHe-gif/android_kernel_xiaomi_sm8250/raw/refs/heads/15.0-alioth/AnyKernel3/anykernel.sh
  
      - name: Build kernel with clang 14.0.2(clang-r445002)
        run: |
          cp build3.sh kernel_source/
          cd kernel_source
          chmod 755 build3.sh
          ./build3.sh
            
      - name: Verify build output
        run: |
          echo "检查构建输出:"
          ls -la kernel_source/out/arch/arm64/boot/ || echo "构建输出目录不存在"
          [ -f "kernel_source/out/arch/arm64/boot/Image.gz-dtb" ] && echo "✅ Image.gz-dtb 存在" || echo "❌ Image.gz-dtb 不存在"

      - name: Create anykernel3 package
        run: |
          cp kernel_source/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3/
          zip -r alioth_arrowos12.1-dockerkernel.zip anykernel.sh Image.gz-dtb LICENSE META-INF tools
          if [ -f "alioth_arrowos12.1-dockerkernel.zip" ]; then
            echo "✅ anykernel3 包创建成功"
            ls -la alioth_arrowos12.1-dockerkernel.zip
            echo "刷机包大小:"
            du -h alioth_arrowos12.1-dockerkernel.zip
          else
            echo "❌ anykernel3 包创建失败"
            exit 1
          fi
        
      - name: Create out directory archive
        run: |
          cd kernel_source
          zip -r kernel_boot_directory.zip out/arch/arm64/boot
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arrowos-kernel-build-artifacts
          path: |
            AnyKernel3/alioth_arrowos12.1-dockerkernel.zip
            kernel_source/kernel_boot_directory.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: arrowos-kernel-build-artifacts
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "当前目录结构:"
          pwd
          ls -la
          echo "Artifacts 目录结构:"
          ls -la ./artifacts/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "alioth-arrowos-12.1-kernel-build"
          name: "alioth ArrowOS 12.1 Kernel Build"
          body: |
            # alioth ArrowOS 12.1 Kernel Build
          
            红米 K40 ArrowOS 12.1 版本内核
            分支：arrow-12.1
            ## 包含文件：
            - `alioth_arrowos12.1-dockerkernel.zip` - AnyKernel3 刷机包
            - `kernel_boot_directory.zip` - 完整的编译输出目录
          
            ## 特性：
            - ✅ 完整 Docker 容器支持
            - ✅ 基于 [ArrowOS 12.1](https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth) 内核源码
            - ✅ 使用 clang 14.0.2 编译
            
            ## 刷机说明
            1. 下载 `alioth_arrowos12.1-dockerkernel.zip`
            2. 通过 TWRP Recovery 刷入
            3. 重启设备
          
            **注意：** 
            - 刷机前请备份重要数据
            - 如需 Magisk，请在刷入内核后单独刷入
          draft: false
          prerelease: false
          files: |
            ./artifacts/AnyKernel3/alioth_arrowos12.1-dockerkernel.zip
            ./artifacts/kernel_source/kernel_boot_directory.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

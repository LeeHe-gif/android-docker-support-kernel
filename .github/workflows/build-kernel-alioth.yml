name: Build alioth Kernel with Android Clang

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses-dev bison bc flex \
          libssl-dev libelf-dev rsync kmod git cpio \
          wget zip unzip python3 make xz-utils ccache

    - name: Download Proton Clang
      run: |
        # 创建工具链目录
        sudo mkdir -p /opt/toolchains
        sudo chmod 777 /opt/toolchains
        
        echo "=== 下载 Proton Clang ==="
        # 使用稳定的 Proton Clang 版本
        wget -q https://github.com/kdrag0n/proton-clang/archive/refs/tags/20211030.tar.gz
        tar -xf 20211030.tar.gz -C /opt/toolchains/
        mv /opt/toolchains/proton-clang-20211030 /opt/toolchains/proton-clang
        
        echo "=== 验证工具链版本 ==="
        /opt/toolchains/proton-clang/bin/clang --version | head -3
        /opt/toolchains/proton-clang/bin/ld.lld --version | head -1

    - name: Clone anykernel3 repository
      run: |
        git clone https://github.com/LeeHe-gif/AnyKernel3.git anykernel3
        cd anykernel3
        sed -i 's/is_slot_device=0/is_slot_device=1/' anykernel.sh
        sed -i 's/kernel.string=polaris_docker_Kernel-arrow11-by_LeeHe/kernel.string=alioth_docker_Kernel-arrow12.1-by_LeeHe/' anykernel.sh
        sed -i 's/device.name1=polaris/device.name1=alioth/' anykernel.sh || true
        sed -i 's/device.name2=polaris/device.name2=alioth/' anykernel.sh || true

    - name: Clone kernel source
      run: |
        git clone https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth.git kernel_source
                
    - name: Build kernel with Proton Clang
      run: |
        cp build_clang.sh kernel_source/
        cd kernel_source
        chmod 755 build_clang.sh
        ./build_clang.sh
        
    - name: Verify build output
      run: |
        if [ -f "kernel_source/out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "✅ 内核编译成功"
          ls -la kernel_source/out/arch/arm64/boot/Image.gz-dtb
          echo "文件大小:"
          du -h kernel_source/out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 内核编译失败，Image.gz-dtb 文件未找到"
          echo "搜索相关文件:"
          find kernel_source/out/ -name "Image*" -type f 2>/dev/null || echo "未找到任何 Image 文件"
          if [ -f "kernel_source/build.log" ]; then
            echo "=== 编译日志最后100行 ==="
            tail -100 kernel_source/build.log
          fi
          exit 1
        fi
        
    - name: Create anykernel3 package
      run: |
        cp kernel_source/out/arch/arm64/boot/Image.gz-dtb anykernel3/
        cd anykernel3/
        zip -r alioth_dockerkernel_clang.zip . -x "*.git*"
        
        if [ -f "alioth_dockerkernel_clang.zip" ]; then
          echo "✅ anykernel3 包创建成功"
          ls -la alioth_dockerkernel_clang.zip
          du -h alioth_dockerkernel_clang.zip
        else
          echo "❌ anykernel3 包创建失败"
          exit 1
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-clang-artifacts
        path: |
          anykernel3/alioth_dockerkernel_clang.zip
        retention-days: 30
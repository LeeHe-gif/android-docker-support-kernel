name: Build ArrowOS12.1 alioth Kernel and Create Release

on:
  workflow_dispatch:
  
env:
  REPO_URL: https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth
  REPO_BRANCH: arrow-12.1
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install basic dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl build-essential \
            libncurses-dev bison bc flex libssl-dev \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libelf-dev rsync kmod git cpio wget zip \
            unzip python3 python-is-python3 make xz-utils python3-pip ccache rsync

      - name: Cache Python 2.7
        uses: actions/cache@v4
        id: cache-python27
        with:
          path: |
            /usr/local/bin/python2.7
            /usr/local/lib/python2.7
            /usr/local/include/python2.7
          key: python-2.7.18-${{ runner.os }}-${{ hashFiles('**/cache-python-version') }}
          restore-keys: |
            python-2.7.18-${{ runner.os }}-

      - name: Create cache version file
        run: |
          echo "python-2.7.18-$(date +%Y%m%d)" > cache-python-version

      - name: Build and Install Python 2.7 (if cache miss)
        if: steps.cache-python27.outputs.cache-hit != 'true'
        run: |
          cd ~
          wget -q https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xzf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --enable-optimizations --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf Python-2.7.18*
          # 创建符号链接
          sudo ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2

      - name: Verify Python 2.7 installation
        run: |
          which python2.7
          python2.7 --version
          which python2
          python2 --version

      - name: Clone kernel source and setup KernelSU
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH
          git clone https://github.com/LeeHe-gif/AnyKernel3.git
          cd AnyKernel3
          rm -rf ramdisk anykernel.sh
          wget https://github.com/LeeHe-gif/android_kernel_xiaomi_sm8250/raw/refs/heads/15.0-alioth/AnyKernel3/anykernel.sh
  
      - name: Build kernel with clang 14.0.2(clang-r445002)
        run: |
          cp build3.sh android_kernel_xiaomi_alioth/
          cd android_kernel_xiaomi_alioth
          chmod 755 build3.sh
          ./build3.sh
            
      - name: Create anykernel3 package
        run: |
          cp android_kernel_xiaomi_alioth/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3/
          zip -r alioth_aw12-1-dockerkernel.zip anykernel.sh Image.gz-dtb LICENSE META-INF tools
          if [ -f "alioth_aw12-1-dockerkernel.zip" ]; then
            echo "✅ anykernel3 包创建成功"
            ls -la alioth_aw12-1-dockerkernel.zip
            echo "刷机包大小:"
            du -h alioth_aw12-1-dockerkernel.zip
          else
            echo "❌ anykernel3 包创建失败"
            exit 1
          fi
        
      - name: Create out directory archive
        run: |
          cd android_kernel_xiaomi_alioth
          zip -r kernel_boot_directory.zip out/arch/arm64/boot
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-artifacts
          path: |
            AnyKernel3/alioth_aw12-1-dockerkernel.zip
            android_kernel_xiaomi_alioth/kernel_boot_directory.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-build-artifacts
          path: ./artifact


      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "alioth-ArrowOS-12.1-kernel-build"
          name: "alioth Docker Kernel Build (proton-clang-13.0.0)"
          body: |
            # alioth Docker Kernel Build
          
            红米k40 ArrowOS 12.1 版本内核
            分支：arrow-12.1
            ## 包含文件：
            - `alioth_aw12-1-dockerkernel.zip` - AnyKernel3 刷机包
            - `kernel_boot_directory.zip` - 完整的编译输出目录
          
            ## 特性：
            - ✅ 完整 Docker 容器支持
            - ✅ 基于 (ArrowOS 12.1)[https://github.com/LeeHe-gif/android_kernel_xiaomi_alioth]内核源码
            
            ## 刷机说明
            1. 下载 `alioth_aw12-1-dockerkernel.zip`
            2. 通过 TWRP Recovery 刷入
            3. 刷入 Magisk（❗目前刷入面具卡会第一屏）
            3. 重启设备
            4. 安装 Magisk 应用管理 root 权限
          
            **注意：** 刷机前请备份重要数据。
          draft: false
          prerelease: false
          files: |
            ./artifact/alioth_aw12-1-dockerkernel.zip
            ./artifact/kernel_boot_directory.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
